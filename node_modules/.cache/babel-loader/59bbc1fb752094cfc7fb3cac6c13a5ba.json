{"remainingRequest":"D:\\software\\file\\test\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\file\\test\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\software\\file\\test\\src\\utils\\static.js","dependencies":[{"path":"D:\\software\\file\\test\\src\\utils\\static.js","mtime":1638330357522},{"path":"D:\\software\\file\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\file\\test\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gIkQ6L3NvZnR3YXJlL2ZpbGUvdGVzdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwoKLyoqCiAqIEBhdXRob3IgY2h1emhpeGluIDEyMDQ1MDUwNTZAcXEuY29tCiAqIEBkZXNjcmlwdGlvbiDlr7zlhaXmiYDmnIkgY29udHJvbGxlciDmqKHlnZfvvIzmtY/op4jlmajnjq/looPkuK3oh6rliqjovpPlh7pjb250cm9sbGVy5paH5Lu25aS55LiLTW9ja+aOpeWPo++8jOivt+WLv+S/ruaUueOAggogKi8KaW1wb3J0IE1vY2sgZnJvbSAnbW9ja2pzJzsKaW1wb3J0IHsgcGFyYW1PYmogfSBmcm9tICdAL3V0aWxzJzsKdmFyIG1vY2tzID0gW107Cgp2YXIgZmlsZXMgPSByZXF1aXJlLmNvbnRleHQoJy4uLy4uL21vY2svY29udHJvbGxlcicsIGZhbHNlLCAvXC5qcyQvKTsKCmZpbGVzLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICBtb2Nrcy5wdXNoLmFwcGx5KG1vY2tzLCBfdG9Db25zdW1hYmxlQXJyYXkoZmlsZXMoa2V5KSkpOwp9KTsKZXhwb3J0IGZ1bmN0aW9uIG1vY2tYSFIoKSB7CiAgTW9jay5YSFIucHJvdG90eXBlLnByb3h5X3NlbmQgPSBNb2NrLlhIUi5wcm90b3R5cGUuc2VuZDsKCiAgTW9jay5YSFIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5jdXN0b20ueGhyKSB7CiAgICAgIHRoaXMuY3VzdG9tLnhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTsKCiAgICAgIGlmICh0aGlzLnJlc3BvbnNlVHlwZSkgewogICAgICAgIHRoaXMuY3VzdG9tLnhoci5yZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTsKICAgICAgfQogICAgfQoKICAgIHRoaXMucHJveHlfc2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07CgogIGZ1bmN0aW9uIFhIUkh0dHBSZXF1c3QocmVzcG9uZCkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgICAgIHZhciByZXN1bHQ7CgogICAgICBpZiAocmVzcG9uZCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7CiAgICAgICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHksCiAgICAgICAgICAgIHR5cGUgPSBvcHRpb25zLnR5cGUsCiAgICAgICAgICAgIHVybCA9IG9wdGlvbnMudXJsOwogICAgICAgIHJlc3VsdCA9IHJlc3BvbmQoewogICAgICAgICAgbWV0aG9kOiB0eXBlLAogICAgICAgICAgYm9keTogSlNPTi5wYXJzZShib2R5KSwKICAgICAgICAgIHF1ZXJ5OiBwYXJhbU9iaih1cmwpCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0ID0gcmVzcG9uZDsKICAgICAgfQoKICAgICAgcmV0dXJuIE1vY2subW9jayhyZXN1bHQpOwogICAgfTsKICB9CgogIG1vY2tzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgIE1vY2subW9jayhuZXcgUmVnRXhwKGl0ZW0udXJsKSwgaXRlbS50eXBlIHx8ICdnZXQnLCBYSFJIdHRwUmVxdXN0KGl0ZW0ucmVzcG9uc2UpKTsKICB9KTsKfQ=="},{"version":3,"sources":["D:/software/file/test/src/utils/static.js"],"names":["Mock","paramObj","mocks","files","require","context","keys","forEach","key","push","mockXHR","XHR","prototype","proxy_send","send","custom","xhr","withCredentials","responseType","arguments","XHRHttpRequst","respond","options","result","Function","body","type","url","method","JSON","parse","query","mock","item","RegExp","response"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,IAAMC,KAAK,GAAG,EAAd;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAACC,OAAR,CAAgB,uBAAhB,EAAyC,KAAzC,EAAgD,OAAhD,CAAd;;AAEAF,KAAK,CAACG,IAAN,GAAaC,OAAb,CAAqB,UAACC,GAAD,EAAS;AAC5BN,EAAAA,KAAK,CAACO,IAAN,OAAAP,KAAK,qBAASC,KAAK,CAACK,GAAD,CAAd,EAAL;AACD,CAFD;AAIA,OAAO,SAASE,OAAT,GAAmB;AACxBV,EAAAA,IAAI,CAACW,GAAL,CAASC,SAAT,CAAmBC,UAAnB,GAAgCb,IAAI,CAACW,GAAL,CAASC,SAAT,CAAmBE,IAAnD;;AACAd,EAAAA,IAAI,CAACW,GAAL,CAASC,SAAT,CAAmBE,IAAnB,GAA0B,YAAY;AACpC,QAAI,KAAKC,MAAL,CAAYC,GAAhB,EAAqB;AACnB,WAAKD,MAAL,CAAYC,GAAZ,CAAgBC,eAAhB,GAAkC,KAAKA,eAAL,IAAwB,KAA1D;;AAEA,UAAI,KAAKC,YAAT,EAAuB;AACrB,aAAKH,MAAL,CAAYC,GAAZ,CAAgBE,YAAhB,GAA+B,KAAKA,YAApC;AACD;AACF;;AACD,SAAKL,UAAL,aAAmBM,SAAnB;AACD,GATD;;AAWA,WAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,WAAO,UAAUC,OAAV,EAAmB;AACxB,UAAIC,MAAJ;;AACA,UAAIF,OAAO,YAAYG,QAAvB,EAAiC;AAAA,YACvBC,IADuB,GACHH,OADG,CACvBG,IADuB;AAAA,YACjBC,IADiB,GACHJ,OADG,CACjBI,IADiB;AAAA,YACXC,GADW,GACHL,OADG,CACXK,GADW;AAE/BJ,QAAAA,MAAM,GAAGF,OAAO,CAAC;AACfO,UAAAA,MAAM,EAAEF,IADO;AAEfD,UAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAFS;AAGfM,UAAAA,KAAK,EAAE9B,QAAQ,CAAC0B,GAAD;AAHA,SAAD,CAAhB;AAKD,OAPD,MAOO;AACLJ,QAAAA,MAAM,GAAGF,OAAT;AACD;;AACD,aAAOrB,IAAI,CAACgC,IAAL,CAAUT,MAAV,CAAP;AACD,KAbD;AAcD;;AAEDrB,EAAAA,KAAK,CAACK,OAAN,CAAc,UAAC0B,IAAD,EAAU;AACtBjC,IAAAA,IAAI,CAACgC,IAAL,CACE,IAAIE,MAAJ,CAAWD,IAAI,CAACN,GAAhB,CADF,EAEEM,IAAI,CAACP,IAAL,IAAa,KAFf,EAGEN,aAAa,CAACa,IAAI,CAACE,QAAN,CAHf;AAKD,GAND;AAOD","sourcesContent":["/**\n * @author chuzhixin 1204505056@qq.com\n * @description 导入所有 controller 模块，浏览器环境中自动输出controller文件夹下Mock接口，请勿修改。\n */\nimport Mock from 'mockjs'\nimport { paramObj } from '@/utils'\n\nconst mocks = []\nconst files = require.context('../../mock/controller', false, /\\.js$/)\n\nfiles.keys().forEach((key) => {\n  mocks.push(...files(key))\n})\n\nexport function mockXHR() {\n  Mock.XHR.prototype.proxy_send = Mock.XHR.prototype.send\n  Mock.XHR.prototype.send = function () {\n    if (this.custom.xhr) {\n      this.custom.xhr.withCredentials = this.withCredentials || false\n\n      if (this.responseType) {\n        this.custom.xhr.responseType = this.responseType\n      }\n    }\n    this.proxy_send(...arguments)\n  }\n\n  function XHRHttpRequst(respond) {\n    return function (options) {\n      let result\n      if (respond instanceof Function) {\n        const { body, type, url } = options\n        result = respond({\n          method: type,\n          body: JSON.parse(body),\n          query: paramObj(url),\n        })\n      } else {\n        result = respond\n      }\n      return Mock.mock(result)\n    }\n  }\n\n  mocks.forEach((item) => {\n    Mock.mock(\n      new RegExp(item.url),\n      item.type || 'get',\n      XHRHttpRequst(item.response)\n    )\n  })\n}\n"]}]}