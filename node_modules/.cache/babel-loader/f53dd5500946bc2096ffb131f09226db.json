{"remainingRequest":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\babel-loader\\lib\\index.js!D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\file\\vue-admin-beautiful-test\\src\\views\\vab\\tree\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\file\\vue-admin-beautiful-test\\src\\views\\vab\\tree\\index.vue","mtime":1638330357810},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"tree-container\">\n    <el-row :gutter=\"20\">\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">常规树</el-divider>\n        <el-input v-model=\"filterText\" placeholder=\"输入关键字过滤\" />\n        <el-tree\n          ref=\"demoTree\"\n          :data=\"data2\"\n          :default-checked-keys=\"defaultCheckedKeys\"\n          :default-expanded-keys=\"defaultExpendedKeys\"\n          :expand-on-click-node=\"false\"\n          :filter-node-method=\"filterNode\"\n          :highlight-current=\"true\"\n          :props=\"defaultProps\"\n          class=\"vab-filter-tree\"\n          node-key=\"id\"\n          show-checkbox\n          @check=\"checkNode\"\n          @node-click=\"nodeClick\"\n          @node-collapse=\"nodeCollapse\"\n          @node-expand=\"nodeExpand\"\n        >\n          <template #defalut=\"{ node, data }\" class=\"vab-custom-tree-node\">\n            <span class=\"vab-tree-item\">\n              <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n              {{ node.label }}\n            </span>\n            <span class=\"vab-tree-options\">\n              <a\n                v-if=\"node.data.rank !== 4\"\n                class=\"vab-tree-btn\"\n                title=\"添加\"\n                @click=\"() => append(node, data, 0)\"\n              >\n                <i class=\"el-icon-plus\"></i>\n              </a>\n              <a\n                class=\"vab-tree-btn\"\n                title=\"编辑\"\n                @click=\"() => edit(node, data, 1)\"\n              >\n                <i class=\"el-icon-edit\"></i>\n              </a>\n              <a\n                v-if=\"node.data.rank !== 1\"\n                class=\"vab-tree-btn\"\n                title=\"刪除\"\n                @click=\"() => remove(node, data)\"\n              >\n                <i class=\"el-icon-delete\"></i>\n              </a>\n            </span>\n          </template>\n        </el-tree>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">懒加载树</el-divider>\n        <el-input\n          v-model.lazy=\"keyW\"\n          :value=\"keyW\"\n          class=\"input-with-select\"\n          placeholder=\"请输入内容\"\n          @keyup.enter.native=\"showTreeList\"\n        ></el-input>\n        <div v-show=\"isShow\" class=\"blur-tree\">\n          <el-tree\n            ref=\"treeFilter\"\n            :data=\"filterDevLlist\"\n            :expand-on-click-node=\"false\"\n            :props=\"defaultProps\"\n            class=\"vab-filter-tree\"\n            default-expand-all\n            highlight-current\n            node-key=\"indexCode\"\n            @node-click=\"nodeClick\"\n          >\n            <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n              <span class=\"vab-tree-item\">\n                <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n                {{ node.label }}\n              </span>\n              <span class=\"vab-tree-options\">\n                <a\n                  v-if=\"node.data.rank !== 4\"\n                  class=\"vab-tree-btn\"\n                  title=\"添加\"\n                >\n                  <i class=\"el-icon-plus\"></i>\n                </a>\n                <a class=\"vab-tree-btn\" title=\"编辑\">\n                  <i class=\"el-icon-edit\"></i>\n                </a>\n                <a\n                  v-if=\"node.data.rank !== 1\"\n                  class=\"vab-tree-btn\"\n                  title=\"刪除\"\n                >\n                  <i class=\"el-icon-delete\"></i>\n                </a>\n              </span>\n            </template>\n          </el-tree>\n        </div>\n        <div v-show=\"!isShow\" class=\"el-tree-wrap\">\n          <el-tree\n            ref=\"tree\"\n            v-loading=\"loading\"\n            :expand-on-click-node=\"false\"\n            :load=\"loadNode\"\n            :props=\"defaultProps\"\n            class=\"vab-filter-tree\"\n            highlight-current\n            lazy\n            node-key=\"indexCode\"\n            @node-click=\"nodeClick\"\n          >\n            <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n              <span class=\"vab-tree-item\">\n                <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n                {{ node.label }}\n              </span>\n              <span class=\"vab-tree-options\">\n                <!-- <a v-if=\"node.data.rank !== 4\" class=\"vab-tree-btn\" title=\"添加\"\"><i class=\"el-icon-plus\"></i></a> -->\n                <a class=\"vab-tree-btn\" title=\"编辑\">\n                  <i class=\"el-icon-edit\"></i>\n                </a>\n                <a\n                  v-if=\"node.data.rank !== 1\"\n                  class=\"vab-tree-btn\"\n                  title=\"刪除\"\n                >\n                  <i class=\"el-icon-delete\"></i>\n                </a>\n              </span>\n            </template>\n          </el-tree>\n        </div>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">单选树</el-divider>\n        <el-select\n          ref=\"singleTree\"\n          v-model=\"singleSelectTreeVal\"\n          class=\"vab-tree-select\"\n          clearable\n          popper-class=\"select-tree-popper\"\n          value-key=\"id\"\n          @clear=\"selectTreeClearHandle('single')\"\n        >\n          <el-option :value=\"singleSelectTreeKey\">\n            <el-tree\n              id=\"singleSelectTree\"\n              ref=\"singleSelectTree\"\n              :current-node-key=\"singleSelectTreeKey\"\n              :data=\"selectTreeData\"\n              :default-expanded-keys=\"selectTreeDefaultSelectedKeys\"\n              :highlight-current=\"true\"\n              :props=\"selectTreeDefaultProps\"\n              node-key=\"id\"\n              @node-click=\"selectTreeNodeClick\"\n            >\n              <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n                <span class=\"vab-tree-item\">{{ node.label }}</span>\n              </template>\n            </el-tree>\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">多选树</el-divider>\n        <el-select\n          v-model=\"multipleSelectTreeVal\"\n          class=\"vab-tree-select\"\n          clearable\n          collapse-tags\n          multiple\n          popper-class=\"select-tree-popper\"\n          @change=\"changeMultipleSelectTreeHandle\"\n          @clear=\"selectTreeClearHandle('multiple')\"\n          @remove-tag=\"removeSelectTreeTag\"\n        >\n          <el-option :value=\"multipleSelectTreeKey\">\n            <el-tree\n              id=\"multipleSelectTree\"\n              ref=\"multipleSelectTree\"\n              :current-node-key=\"multipleSelectTreeKey\"\n              :data=\"selectTreeData\"\n              :default-checked-keys=\"selectTreeDefaultSelectedKeys\"\n              :default-expanded-keys=\"selectTreeDefaultSelectedKeys\"\n              :highlight-current=\"true\"\n              :props=\"selectTreeDefaultProps\"\n              node-key=\"id\"\n              show-checkbox\n              @check=\"multipleSelectTreeCheckNode\"\n            ></el-tree>\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-row>\n    <!--添加/编辑节点弹框-------------------start-->\n    <el-dialog\n      :title=\"dialogTitle\"\n      :visible.sync=\"treeDialogVisible\"\n      class=\"tree-operate-dialog\"\n      width=\"400px\"\n      @close=\"treeDialogVisible = false\"\n    >\n      <el-form ref=\"treeForm\" :model=\"treeForm\">\n        <el-form-item label=\"节点名称\" required>\n          <el-input v-model=\"treeForm.name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"treeDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveTree\">确 定</el-button>\n      </div>\n    </el-dialog>\n    <!--添加/编辑节点弹框-------------------end-->\n  </div>\n</template>\n\n<script>\n  import { getTreeList } from '@/api/tree'\n\n  export default {\n    name: 'Tree',\n    data() {\n      return {\n        dialogTitle: '添加节点',\n        treeFlag: 0,\n        treeDialogVisible: false,\n        treeForm: {\n          id: '',\n          name: '',\n        },\n        checkNodeKeys: [],\n        filterText: '',\n        data2: [],\n        defaultProps: {\n          children: 'children',\n          label: 'name',\n        },\n        defaultExpendedKeys: [],\n        defaultCheckedKeys: [],\n        loading: true,\n        keyW: '',\n        filterDevLlist: [],\n        isShow: false,\n        updateTree: true,\n        /* 单选树-多选树---------开始 */\n        selectLevel: 4, // 树可选叶子level等级\n        singleSelectTreeVal: '', //单选树默认label值\n        singleSelectTreeKey: '', //单选树默认key值\n        selectTreeData: [], //单选树的值\n        selectTreeDefaultSelectedKeys: [], //单选树默认展开的key值数组\n        selectTreeDefaultProps: {\n          children: 'children',\n          label: 'name',\n        },\n        multipleSelectTreeVal: [], //多选树默认label值\n        multipleSelectTreeKey: '', //多选树默认key值\n        /* 单选树-多选树---------结束 */\n      }\n    },\n    watch: {\n      filterText(val) {\n        this.$refs.demoTree.filter(val)\n      },\n    },\n    mounted() {\n      this.$nextTick(() => {\n        this.getTreeListFuc(1)\n        this.setCheckedKeys()\n        // 初始化单选树\n        this.initSingleTree('single')\n        // 初始化多选树\n        this.initSingleTree('multiple')\n      })\n    },\n    methods: {\n      // 树level小于n级展开方法\n      openTree(treeData, n) {\n        const each = (data) => {\n          data.forEach((e) => {\n            if (e.rank <= n) {\n              this.defaultExpendedKeys.push(e.id)\n            }\n            if (e.children.length > 0) {\n              each(e.children)\n            }\n          })\n        }\n\n        each(treeData)\n      },\n      // 获取tree数据\n      async getTreeListFuc(flag) {\n        const { data } = await getTreeList()\n        this.data2 = data\n        if (flag) {\n          this.openTree(this.data2, 2)\n        }\n      },\n      // 节点过滤操作\n      filterNode(value, data) {\n        if (!value) return true\n        return data.name.indexOf(value) !== -1\n      },\n      // 添加节点操作\n      append(node, data, flag) {\n        this.treeFlag = flag\n        this.dialogTitle = '添加节点'\n        this.treeForm = {\n          id: '',\n          name: '',\n        }\n        this.treeDialogVisible = true\n      },\n      // 编辑节点操作\n      edit(node, data, flag) {\n        this.treeFlag = flag\n        this.dialogTitle = '编辑节点'\n        this.treeForm = {\n          id: data.id,\n          name: data.name,\n        }\n        this.treeDialogVisible = true\n      },\n      // 删除节点操作\n      remove(node, data) {\n        this.$baseConfirm('你确定要删除该节点?', null, async () => {\n          const { msg } = getTreeList()\n          this.$baseMessage(msg, 'success')\n          this.getTreeListFuc(0)\n        })\n      },\n      // 保存添加和编辑\n      saveTree() {\n        this.$refs.treeForm.validate(async (valid) => {\n          if (valid) {\n            const { msg } = await getTreeList()\n            this.$baseMessage(msg, 'success')\n            this.treeDialogVisible = false\n            this.getTreeListFuc(0)\n          }\n        })\n      },\n      // 设置节点选中\n      setCheckedKeys() {\n        this.$refs.demoTree.setCheckedKeys([1])\n      },\n      // 点击叶子节点\n      nodeClick(data, node, el) {},\n      // 节点选中操作\n      checkNode(data, node, el) {\n        this.checkNodeKeys = node.checkedKeys\n      },\n      // 节点展开操作\n      nodeExpand(data, node, el) {\n        this.defaultExpendedKeys.push(data.id)\n      },\n      // 节点关闭操作\n      nodeCollapse(data, node, el) {\n        this.defaultExpendedKeys.splice(\n          this.defaultExpendedKeys.findIndex((item) => item.id === data.id),\n          1\n        )\n      },\n      async loadNode(node, resolve) {\n        if (node.level === 0) {\n          const { data } = await getTreeList()\n          this.loading = false\n          return resolve(data)\n        } else {\n          const { data } = await getTreeList()\n          return resolve(res.data)\n        }\n      },\n      //懒加载树输入框筛选方法\n      async showTreeList(value) {\n        if (typeof value === 'string') {\n          this.keyW = value.trim()\n        }\n        if (this.keyW.length !== 0) {\n          // 请求后台返回查询结果\n          let treeOption = {}\n          treeOption = {\n            keyWord: this.keyW,\n          }\n          const { data } = await getTreeList()\n          this.filterDevLlist = data\n          this.isShow = true\n        } else {\n          this.isShow = false\n        }\n      },\n      /* 单选/多选树方法-------------------开始 */\n      // 初始化单选树的值\n      async initSingleTree(treeType) {\n        const { data } = await getTreeList()\n        this.selectTreeData = data\n        this.$nextTick(() => {\n          this.selectTreeDefaultSelectedKeys = this.singleSelectTreeKey.split(\n            ','\n          ) // 设置默认展开\n          if (treeType == 'single') {\n            //单选树\n            this.$refs.singleSelectTree.setCurrentKey(this.singleSelectTreeKey) // 设置默认选中\n          } else {\n            // 多选树\n            this.$refs.multipleSelectTree.setCheckedKeys(\n              this.selectTreeDefaultSelectedKeys\n            )\n          }\n        })\n      },\n      // 清除单选树选中\n      selectTreeClearHandle(type) {\n        this.selectTreeDefaultSelectedKeys = []\n        this.clearSelected()\n        if (type == 'single') {\n          this.singleSelectTreeVal = ''\n          this.singleSelectTreeKey = ''\n          this.$refs.singleSelectTree.setCurrentKey('') // 设置默认选中\n        } else {\n          this.multipleSelectTreeVal = []\n          this.multipleSelectTreeKey = ''\n          this.$refs.multipleSelectTree.setCheckedKeys([])\n        }\n      },\n      /* 清空选中样式 */\n      clearSelected() {\n        const allNode = document.querySelectorAll(\n          '#singleSelectTree .el-tree-node'\n        )\n        allNode.forEach((element) => element.classList.remove('is-current'))\n      },\n      // select多选时移除某项操作\n      removeSelectTreeTag(val) {\n        const stack = JSON.parse(JSON.stringify(this.selectTreeData))\n        while (stack.length) {\n          const curr = stack.shift()\n          if (curr.name == val) {\n            return this.$refs.multipleSelectTree.setChecked(curr.id, false)\n          }\n          if (curr.children && curr.children.length) {\n            stack.unshift(...curr.children)\n          }\n        }\n      },\n      changeMultipleSelectTreeHandle(val) {},\n      // 点击叶子节点\n      selectTreeNodeClick(data, node, el) {\n        if (data.rank >= this.selectLevel) {\n          this.singleSelectTreeVal = data.name\n          this.singleSelectTreeKey = data.id\n          this.$refs.singleTree.blur()\n        }\n      },\n      // 节点选中操作\n      multipleSelectTreeCheckNode(data, node, el) {\n        const checkedNodes = this.$refs.multipleSelectTree.getCheckedNodes()\n        const keyArr = []\n        const valueArr = []\n        checkedNodes.forEach((item) => {\n          if (item.rank >= this.selectLevel) {\n            keyArr.push(item.id)\n            valueArr.push(item.name)\n          }\n        })\n        this.multipleSelectTreeVal = valueArr\n        this.multipleSelectTreeKey = keyArr.join(',')\n      },\n      /* 单选/多选树方法-------------------结束 */\n    },\n  }\n</script>\n"],"sourceRoot":"src/views/vab/tree"}]}