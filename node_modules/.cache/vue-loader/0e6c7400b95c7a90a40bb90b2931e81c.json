{"remainingRequest":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\file\\test\\src\\views\\vab\\map\\index.vue?vue&type=style&index=0&id=51f4f63d&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\file\\test\\src\\views\\vab\\map\\index.vue","mtime":1638330357735},{"path":"D:\\software\\file\\test\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1hcC1jb250YWluZXIgewogIC5jb250YWluZXIgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IGNhbGMoMTAwdmggLSAyMTRweCk7CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/vab/map","sourcesContent":["<template>\n  <div class=\"map-container\">\n    <div id=\"map\" class=\"container\"></div>\n  </div>\n</template>\n\n<script>\n  import axios from 'axios'\n  import * as mapv from 'mapv'\n  export default {\n    name: 'Map',\n    components: {},\n    data() {\n      return {}\n    },\n    created() {},\n    mounted() {\n      this.$nextTick(() => {\n        const map = this.$baseMap()\n        axios\n          .get(\n            'https://cdn.jsdelivr.net/npm/mapv@2.0.12/examples/data/od-xierqi.txt'\n          )\n          .then((rs) => {\n            let data = []\n            let timeData = []\n\n            rs = rs.data.split('\\n')\n            let maxLength = 0\n            for (let i = 0; i < rs.length; i++) {\n              let item = rs[i].split(',')\n              let coordinates = []\n              if (item.length > maxLength) {\n                maxLength = item.length\n              }\n              for (let j = 0; j < item.length; j += 2) {\n                let x = (Number(item[j]) / 20037508.34) * 180\n                let y = (Number(item[j + 1]) / 20037508.34) * 180\n                y =\n                  (180 / Math.PI) *\n                  (2 * Math.atan(Math.exp((y * Math.PI) / 180)) - Math.PI / 2)\n                if (x == 0 || y == NaN) {\n                  continue\n                }\n                coordinates.push([x, y])\n                timeData.push({\n                  geometry: {\n                    type: 'Point',\n                    coordinates: [x, y],\n                  },\n                  count: 1,\n                  time: j,\n                })\n              }\n              data.push({\n                geometry: {\n                  type: 'LineString',\n                  coordinates: coordinates,\n                },\n              })\n            }\n\n            let dataSet = new mapv.DataSet(data)\n\n            let options = {\n              strokeStyle: 'rgba(53,57,255,0.5)',\n              // globalCompositeOperation: 'lighter',\n              shadowColor: 'rgba(53,57,255,0.2)',\n              shadowBlur: 3,\n              lineWidth: 3.0,\n              draw: 'simple',\n            }\n\n            let mapvLayer = new mapv.MaptalksLayer(\n              'mapv1',\n              dataSet,\n              options\n            ).addTo(map)\n\n            let dataSet2 = new mapv.DataSet(timeData)\n\n            let options2 = {\n              fillStyle: 'rgba(255, 250, 250, 0.2)',\n              globalCompositeOperation: 'lighter',\n              size: 1.5,\n              animation: {\n                stepsRange: {\n                  start: 0,\n                  end: 100,\n                },\n                trails: 3,\n                duration: 5,\n              },\n              draw: 'simple',\n            }\n\n            let mapvLayer2 = new mapv.MaptalksLayer(\n              'mapv2',\n              dataSet2,\n              options2\n            ).addTo(map)\n          })\n      })\n    },\n    methods: {},\n  }\n</script>\n<style lang=\"scss\" scoped>\n  .map-container {\n    .container {\n      width: 100%;\n      height: calc(100vh - 214px);\n    }\n  }\n</style>\n"]}]}