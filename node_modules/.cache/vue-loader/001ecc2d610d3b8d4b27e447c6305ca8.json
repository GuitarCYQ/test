{"remainingRequest":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\file\\test\\src\\components\\SelectTree\\index.vue?vue&type=style&index=0&id=e8604a26&lang=scss&scoped=true&","dependencies":[{"path":"D:\\software\\file\\test\\src\\components\\SelectTree\\index.vue","mtime":1638330357216},{"path":"D:\\software\\file\\test\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5lbC1zY3JvbGxiYXIgLmVsLXNjcm9sbGJhcl9fdmlldyAuZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtIHsKICBoZWlnaHQ6IGF1dG87CiAgbWF4LWhlaWdodDogMjc0cHg7CiAgcGFkZGluZzogMDsKICBvdmVyZmxvdy15OiBhdXRvOwp9CgouZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtLnNlbGVjdGVkIHsKICBmb250LXdlaWdodDogbm9ybWFsOwp9Cgp1bCBsaSA+IC5lbC10cmVlIC5lbC10cmVlLW5vZGVfX2NvbnRlbnQgewogIGhlaWdodDogYXV0bzsKICBwYWRkaW5nOiAwIDIwcHg7Cn0KCi5lbC10cmVlLW5vZGVfX2xhYmVsIHsKICBmb250LXdlaWdodDogbm9ybWFsOwp9CgouZWwtdHJlZSA+IC5pcy1jdXJyZW50IC5lbC10cmVlLW5vZGVfX2xhYmVsIHsKICBmb250LXdlaWdodDogNzAwOwogIGNvbG9yOiAjNDA5ZWZmOwp9CgouZWwtdHJlZSA+IC5pcy1jdXJyZW50IC5lbC10cmVlLW5vZGVfX2NoaWxkcmVuIC5lbC10cmVlLW5vZGVfX2xhYmVsIHsKICBmb250LXdlaWdodDogbm9ybWFsOwogIGNvbG9yOiAjNjA2MjY2Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/SelectTree","sourcesContent":["<template>\n  <div class=\"select-tree-template\">\n    <el-select\n      v-model=\"selectValue\"\n      :clearable=\"clearable\"\n      :collapse-tags=\"selectType == 'multiple'\"\n      :multiple=\"selectType == 'multiple'\"\n      class=\"vab-tree-select\"\n      value-key=\"id\"\n      @clear=\"clearHandle\"\n      @remove-tag=\"removeTag\"\n    >\n      <el-option :value=\"selectKey\">\n        <el-tree\n          id=\"treeOption\"\n          ref=\"treeOption\"\n          :current-node-key=\"currentNodeKey\"\n          :data=\"treeOptions\"\n          :default-checked-keys=\"defaultSelectedKeys\"\n          :default-expanded-keys=\"defaultSelectedKeys\"\n          :highlight-current=\"true\"\n          :props=\"defaultProps\"\n          :show-checkbox=\"selectType == 'multiple'\"\n          node-key=\"id\"\n          @check=\"checkNode\"\n          @node-click=\"nodeClick\"\n        ></el-tree>\n      </el-option>\n    </el-select>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'SelectTreeTemplate',\n    props: {\n      /* 树形结构数据 */\n      treeOptions: {\n        type: Array,\n        default: () => {\n          return []\n        },\n      },\n      /* 单选/多选 */\n      selectType: {\n        type: String,\n        default: () => {\n          return 'single'\n        },\n      },\n      /* 初始选中值key */\n      selectedKey: {\n        type: String,\n        default: () => {\n          return ''\n        },\n      },\n      /* 初始选中值name */\n      selectedValue: {\n        type: String,\n        default: () => {\n          return ''\n        },\n      },\n      /* 可做选择的层级 */\n      selectLevel: {\n        type: [String, Number],\n        default: () => {\n          return ''\n        },\n      },\n      /* 可清空选项 */\n      clearable: {\n        type: Boolean,\n        default: () => {\n          return true\n        },\n      },\n    },\n    data() {\n      return {\n        defaultProps: {\n          children: 'children',\n          label: 'name',\n        },\n        defaultSelectedKeys: [], //初始选中值数组\n        currentNodeKey: this.selectedKey,\n        selectValue:\n          this.selectType == 'multiple'\n            ? this.selectedValue.split(',')\n            : this.selectedValue, //下拉框选中值label\n        selectKey:\n          this.selectType == 'multiple'\n            ? this.selectedKey.split(',')\n            : this.selectedKey, //下拉框选中值value\n      }\n    },\n    mounted() {\n      const that = this\n      this.initTree()\n    },\n    methods: {\n      // 初始化树的值\n      initTree() {\n        const that = this\n        if (that.selectedKey) {\n          that.defaultSelectedKeys = that.selectedKey.split(',') // 设置默认展开\n          if (that.selectType == 'single') {\n            that.$refs.treeOption.setCurrentKey(that.selectedKey) // 设置默认选中\n          } else {\n            that.$refs.treeOption.setCheckedKeys(that.defaultSelectedKeys)\n          }\n        }\n      },\n      // 清除选中\n      clearHandle() {\n        const that = this\n        this.selectValue = ''\n        this.selectKey = ''\n        this.defaultSelectedKeys = []\n        this.currentNodeKey = ''\n        this.clearSelected()\n        if (that.selectType == 'single') {\n          that.$refs.treeOption.setCurrentKey('') // 设置默认选中\n        } else {\n          that.$refs.treeOption.setCheckedKeys([])\n        }\n      },\n      /* 清空选中样式 */\n      clearSelected() {\n        const allNode = document.querySelectorAll('#treeOption .el-tree-node')\n        allNode.forEach((element) => element.classList.remove('is-current'))\n      },\n      // select多选时移除某项操作\n      removeTag(val) {\n        this.$refs.treeOption.setCheckedKeys([])\n      },\n      // 点击叶子节点\n      nodeClick(data, node, el) {\n        if (data.rank >= this.selectLevel) {\n          this.selectValue = data.name\n          this.selectKey = data.id\n        }\n      },\n      // 节点选中操作\n      checkNode(data, node, el) {\n        const checkedNodes = this.$refs.treeOption.getCheckedNodes()\n        const keyArr = []\n        const valueArr = []\n        checkedNodes.forEach((item) => {\n          if (item.rank >= this.selectLevel) {\n            keyArr.push(item.id)\n            valueArr.push(item.name)\n          }\n        })\n        this.selectValue = valueArr\n        this.selectKey = keyArr\n      },\n    },\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .el-scrollbar .el-scrollbar__view .el-select-dropdown__item {\n    height: auto;\n    max-height: 274px;\n    padding: 0;\n    overflow-y: auto;\n  }\n\n  .el-select-dropdown__item.selected {\n    font-weight: normal;\n  }\n\n  ul li > .el-tree .el-tree-node__content {\n    height: auto;\n    padding: 0 20px;\n  }\n\n  .el-tree-node__label {\n    font-weight: normal;\n  }\n\n  .el-tree > .is-current .el-tree-node__label {\n    font-weight: 700;\n    color: #409eff;\n  }\n\n  .el-tree > .is-current .el-tree-node__children .el-tree-node__label {\n    font-weight: normal;\n    color: #606266;\n  }\n</style>\n<style lang=\"scss\">\n  /* .vab-tree-select{\n      .el-tag__close.el-icon-close{\n        width:0;\n        overflow:hidden;\n      }\n    } */\n</style>\n"]}]}