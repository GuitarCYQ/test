{"remainingRequest":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\file\\vue-admin-beautiful-test\\src\\views\\vab\\tree\\index.vue?vue&type=template&id=f909cd9a&","dependencies":[{"path":"D:\\software\\file\\vue-admin-beautiful-test\\src\\views\\vab\\tree\\index.vue","mtime":1638330357810},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\vue-admin-beautiful-test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}