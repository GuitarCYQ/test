{"remainingRequest":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\software\\file\\test\\src\\views\\vab\\tree\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\software\\file\\test\\src\\views\\vab\\tree\\index.vue","mtime":1638330357810},{"path":"D:\\software\\file\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\software\\file\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\software\\file\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+NA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/vab/tree","sourcesContent":["<template>\n  <div class=\"tree-container\">\n    <el-row :gutter=\"20\">\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">常规树</el-divider>\n        <el-input v-model=\"filterText\" placeholder=\"输入关键字过滤\" />\n        <el-tree\n          ref=\"demoTree\"\n          :data=\"data2\"\n          :default-checked-keys=\"defaultCheckedKeys\"\n          :default-expanded-keys=\"defaultExpendedKeys\"\n          :expand-on-click-node=\"false\"\n          :filter-node-method=\"filterNode\"\n          :highlight-current=\"true\"\n          :props=\"defaultProps\"\n          class=\"vab-filter-tree\"\n          node-key=\"id\"\n          show-checkbox\n          @check=\"checkNode\"\n          @node-click=\"nodeClick\"\n          @node-collapse=\"nodeCollapse\"\n          @node-expand=\"nodeExpand\"\n        >\n          <template #defalut=\"{ node, data }\" class=\"vab-custom-tree-node\">\n            <span class=\"vab-tree-item\">\n              <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n              {{ node.label }}\n            </span>\n            <span class=\"vab-tree-options\">\n              <a\n                v-if=\"node.data.rank !== 4\"\n                class=\"vab-tree-btn\"\n                title=\"添加\"\n                @click=\"() => append(node, data, 0)\"\n              >\n                <i class=\"el-icon-plus\"></i>\n              </a>\n              <a\n                class=\"vab-tree-btn\"\n                title=\"编辑\"\n                @click=\"() => edit(node, data, 1)\"\n              >\n                <i class=\"el-icon-edit\"></i>\n              </a>\n              <a\n                v-if=\"node.data.rank !== 1\"\n                class=\"vab-tree-btn\"\n                title=\"刪除\"\n                @click=\"() => remove(node, data)\"\n              >\n                <i class=\"el-icon-delete\"></i>\n              </a>\n            </span>\n          </template>\n        </el-tree>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">懒加载树</el-divider>\n        <el-input\n          v-model.lazy=\"keyW\"\n          :value=\"keyW\"\n          class=\"input-with-select\"\n          placeholder=\"请输入内容\"\n          @keyup.enter.native=\"showTreeList\"\n        ></el-input>\n        <div v-show=\"isShow\" class=\"blur-tree\">\n          <el-tree\n            ref=\"treeFilter\"\n            :data=\"filterDevLlist\"\n            :expand-on-click-node=\"false\"\n            :props=\"defaultProps\"\n            class=\"vab-filter-tree\"\n            default-expand-all\n            highlight-current\n            node-key=\"indexCode\"\n            @node-click=\"nodeClick\"\n          >\n            <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n              <span class=\"vab-tree-item\">\n                <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n                {{ node.label }}\n              </span>\n              <span class=\"vab-tree-options\">\n                <a\n                  v-if=\"node.data.rank !== 4\"\n                  class=\"vab-tree-btn\"\n                  title=\"添加\"\n                >\n                  <i class=\"el-icon-plus\"></i>\n                </a>\n                <a class=\"vab-tree-btn\" title=\"编辑\">\n                  <i class=\"el-icon-edit\"></i>\n                </a>\n                <a\n                  v-if=\"node.data.rank !== 1\"\n                  class=\"vab-tree-btn\"\n                  title=\"刪除\"\n                >\n                  <i class=\"el-icon-delete\"></i>\n                </a>\n              </span>\n            </template>\n          </el-tree>\n        </div>\n        <div v-show=\"!isShow\" class=\"el-tree-wrap\">\n          <el-tree\n            ref=\"tree\"\n            v-loading=\"loading\"\n            :expand-on-click-node=\"false\"\n            :load=\"loadNode\"\n            :props=\"defaultProps\"\n            class=\"vab-filter-tree\"\n            highlight-current\n            lazy\n            node-key=\"indexCode\"\n            @node-click=\"nodeClick\"\n          >\n            <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n              <span class=\"vab-tree-item\">\n                <i v-if=\"node.data.rank == 4\" class=\"el-icon-s-custom\"></i>\n                {{ node.label }}\n              </span>\n              <span class=\"vab-tree-options\">\n                <!-- <a v-if=\"node.data.rank !== 4\" class=\"vab-tree-btn\" title=\"添加\"\"><i class=\"el-icon-plus\"></i></a> -->\n                <a class=\"vab-tree-btn\" title=\"编辑\">\n                  <i class=\"el-icon-edit\"></i>\n                </a>\n                <a\n                  v-if=\"node.data.rank !== 1\"\n                  class=\"vab-tree-btn\"\n                  title=\"刪除\"\n                >\n                  <i class=\"el-icon-delete\"></i>\n                </a>\n              </span>\n            </template>\n          </el-tree>\n        </div>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">单选树</el-divider>\n        <el-select\n          ref=\"singleTree\"\n          v-model=\"singleSelectTreeVal\"\n          class=\"vab-tree-select\"\n          clearable\n          popper-class=\"select-tree-popper\"\n          value-key=\"id\"\n          @clear=\"selectTreeClearHandle('single')\"\n        >\n          <el-option :value=\"singleSelectTreeKey\">\n            <el-tree\n              id=\"singleSelectTree\"\n              ref=\"singleSelectTree\"\n              :current-node-key=\"singleSelectTreeKey\"\n              :data=\"selectTreeData\"\n              :default-expanded-keys=\"selectTreeDefaultSelectedKeys\"\n              :highlight-current=\"true\"\n              :props=\"selectTreeDefaultProps\"\n              node-key=\"id\"\n              @node-click=\"selectTreeNodeClick\"\n            >\n              <template #defalut=\"{ node }\" class=\"vab-custom-tree-node\">\n                <span class=\"vab-tree-item\">{{ node.label }}</span>\n              </template>\n            </el-tree>\n          </el-option>\n        </el-select>\n      </el-col>\n      <el-col :xs=\"24\" :sm=\"24\" :md=\"24\" :lg=\"6\" :xl=\"6\">\n        <el-divider content-position=\"left\">多选树</el-divider>\n        <el-select\n          v-model=\"multipleSelectTreeVal\"\n          class=\"vab-tree-select\"\n          clearable\n          collapse-tags\n          multiple\n          popper-class=\"select-tree-popper\"\n          @change=\"changeMultipleSelectTreeHandle\"\n          @clear=\"selectTreeClearHandle('multiple')\"\n          @remove-tag=\"removeSelectTreeTag\"\n        >\n          <el-option :value=\"multipleSelectTreeKey\">\n            <el-tree\n              id=\"multipleSelectTree\"\n              ref=\"multipleSelectTree\"\n              :current-node-key=\"multipleSelectTreeKey\"\n              :data=\"selectTreeData\"\n              :default-checked-keys=\"selectTreeDefaultSelectedKeys\"\n              :default-expanded-keys=\"selectTreeDefaultSelectedKeys\"\n              :highlight-current=\"true\"\n              :props=\"selectTreeDefaultProps\"\n              node-key=\"id\"\n              show-checkbox\n              @check=\"multipleSelectTreeCheckNode\"\n            ></el-tree>\n          </el-option>\n        </el-select>\n      </el-col>\n    </el-row>\n    <!--添加/编辑节点弹框-------------------start-->\n    <el-dialog\n      :title=\"dialogTitle\"\n      :visible.sync=\"treeDialogVisible\"\n      class=\"tree-operate-dialog\"\n      width=\"400px\"\n      @close=\"treeDialogVisible = false\"\n    >\n      <el-form ref=\"treeForm\" :model=\"treeForm\">\n        <el-form-item label=\"节点名称\" required>\n          <el-input v-model=\"treeForm.name\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"treeDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"saveTree\">确 定</el-button>\n      </div>\n    </el-dialog>\n    <!--添加/编辑节点弹框-------------------end-->\n  </div>\n</template>\n\n<script>\n  import { getTreeList } from '@/api/tree'\n\n  export default {\n    name: 'Tree',\n    data() {\n      return {\n        dialogTitle: '添加节点',\n        treeFlag: 0,\n        treeDialogVisible: false,\n        treeForm: {\n          id: '',\n          name: '',\n        },\n        checkNodeKeys: [],\n        filterText: '',\n        data2: [],\n        defaultProps: {\n          children: 'children',\n          label: 'name',\n        },\n        defaultExpendedKeys: [],\n        defaultCheckedKeys: [],\n        loading: true,\n        keyW: '',\n        filterDevLlist: [],\n        isShow: false,\n        updateTree: true,\n        /* 单选树-多选树---------开始 */\n        selectLevel: 4, // 树可选叶子level等级\n        singleSelectTreeVal: '', //单选树默认label值\n        singleSelectTreeKey: '', //单选树默认key值\n        selectTreeData: [], //单选树的值\n        selectTreeDefaultSelectedKeys: [], //单选树默认展开的key值数组\n        selectTreeDefaultProps: {\n          children: 'children',\n          label: 'name',\n        },\n        multipleSelectTreeVal: [], //多选树默认label值\n        multipleSelectTreeKey: '', //多选树默认key值\n        /* 单选树-多选树---------结束 */\n      }\n    },\n    watch: {\n      filterText(val) {\n        this.$refs.demoTree.filter(val)\n      },\n    },\n    mounted() {\n      this.$nextTick(() => {\n        this.getTreeListFuc(1)\n        this.setCheckedKeys()\n        // 初始化单选树\n        this.initSingleTree('single')\n        // 初始化多选树\n        this.initSingleTree('multiple')\n      })\n    },\n    methods: {\n      // 树level小于n级展开方法\n      openTree(treeData, n) {\n        const each = (data) => {\n          data.forEach((e) => {\n            if (e.rank <= n) {\n              this.defaultExpendedKeys.push(e.id)\n            }\n            if (e.children.length > 0) {\n              each(e.children)\n            }\n          })\n        }\n\n        each(treeData)\n      },\n      // 获取tree数据\n      async getTreeListFuc(flag) {\n        const { data } = await getTreeList()\n        this.data2 = data\n        if (flag) {\n          this.openTree(this.data2, 2)\n        }\n      },\n      // 节点过滤操作\n      filterNode(value, data) {\n        if (!value) return true\n        return data.name.indexOf(value) !== -1\n      },\n      // 添加节点操作\n      append(node, data, flag) {\n        this.treeFlag = flag\n        this.dialogTitle = '添加节点'\n        this.treeForm = {\n          id: '',\n          name: '',\n        }\n        this.treeDialogVisible = true\n      },\n      // 编辑节点操作\n      edit(node, data, flag) {\n        this.treeFlag = flag\n        this.dialogTitle = '编辑节点'\n        this.treeForm = {\n          id: data.id,\n          name: data.name,\n        }\n        this.treeDialogVisible = true\n      },\n      // 删除节点操作\n      remove(node, data) {\n        this.$baseConfirm('你确定要删除该节点?', null, async () => {\n          const { msg } = getTreeList()\n          this.$baseMessage(msg, 'success')\n          this.getTreeListFuc(0)\n        })\n      },\n      // 保存添加和编辑\n      saveTree() {\n        this.$refs.treeForm.validate(async (valid) => {\n          if (valid) {\n            const { msg } = await getTreeList()\n            this.$baseMessage(msg, 'success')\n            this.treeDialogVisible = false\n            this.getTreeListFuc(0)\n          }\n        })\n      },\n      // 设置节点选中\n      setCheckedKeys() {\n        this.$refs.demoTree.setCheckedKeys([1])\n      },\n      // 点击叶子节点\n      nodeClick(data, node, el) {},\n      // 节点选中操作\n      checkNode(data, node, el) {\n        this.checkNodeKeys = node.checkedKeys\n      },\n      // 节点展开操作\n      nodeExpand(data, node, el) {\n        this.defaultExpendedKeys.push(data.id)\n      },\n      // 节点关闭操作\n      nodeCollapse(data, node, el) {\n        this.defaultExpendedKeys.splice(\n          this.defaultExpendedKeys.findIndex((item) => item.id === data.id),\n          1\n        )\n      },\n      async loadNode(node, resolve) {\n        if (node.level === 0) {\n          const { data } = await getTreeList()\n          this.loading = false\n          return resolve(data)\n        } else {\n          const { data } = await getTreeList()\n          return resolve(res.data)\n        }\n      },\n      //懒加载树输入框筛选方法\n      async showTreeList(value) {\n        if (typeof value === 'string') {\n          this.keyW = value.trim()\n        }\n        if (this.keyW.length !== 0) {\n          // 请求后台返回查询结果\n          let treeOption = {}\n          treeOption = {\n            keyWord: this.keyW,\n          }\n          const { data } = await getTreeList()\n          this.filterDevLlist = data\n          this.isShow = true\n        } else {\n          this.isShow = false\n        }\n      },\n      /* 单选/多选树方法-------------------开始 */\n      // 初始化单选树的值\n      async initSingleTree(treeType) {\n        const { data } = await getTreeList()\n        this.selectTreeData = data\n        this.$nextTick(() => {\n          this.selectTreeDefaultSelectedKeys = this.singleSelectTreeKey.split(\n            ','\n          ) // 设置默认展开\n          if (treeType == 'single') {\n            //单选树\n            this.$refs.singleSelectTree.setCurrentKey(this.singleSelectTreeKey) // 设置默认选中\n          } else {\n            // 多选树\n            this.$refs.multipleSelectTree.setCheckedKeys(\n              this.selectTreeDefaultSelectedKeys\n            )\n          }\n        })\n      },\n      // 清除单选树选中\n      selectTreeClearHandle(type) {\n        this.selectTreeDefaultSelectedKeys = []\n        this.clearSelected()\n        if (type == 'single') {\n          this.singleSelectTreeVal = ''\n          this.singleSelectTreeKey = ''\n          this.$refs.singleSelectTree.setCurrentKey('') // 设置默认选中\n        } else {\n          this.multipleSelectTreeVal = []\n          this.multipleSelectTreeKey = ''\n          this.$refs.multipleSelectTree.setCheckedKeys([])\n        }\n      },\n      /* 清空选中样式 */\n      clearSelected() {\n        const allNode = document.querySelectorAll(\n          '#singleSelectTree .el-tree-node'\n        )\n        allNode.forEach((element) => element.classList.remove('is-current'))\n      },\n      // select多选时移除某项操作\n      removeSelectTreeTag(val) {\n        const stack = JSON.parse(JSON.stringify(this.selectTreeData))\n        while (stack.length) {\n          const curr = stack.shift()\n          if (curr.name == val) {\n            return this.$refs.multipleSelectTree.setChecked(curr.id, false)\n          }\n          if (curr.children && curr.children.length) {\n            stack.unshift(...curr.children)\n          }\n        }\n      },\n      changeMultipleSelectTreeHandle(val) {},\n      // 点击叶子节点\n      selectTreeNodeClick(data, node, el) {\n        if (data.rank >= this.selectLevel) {\n          this.singleSelectTreeVal = data.name\n          this.singleSelectTreeKey = data.id\n          this.$refs.singleTree.blur()\n        }\n      },\n      // 节点选中操作\n      multipleSelectTreeCheckNode(data, node, el) {\n        const checkedNodes = this.$refs.multipleSelectTree.getCheckedNodes()\n        const keyArr = []\n        const valueArr = []\n        checkedNodes.forEach((item) => {\n          if (item.rank >= this.selectLevel) {\n            keyArr.push(item.id)\n            valueArr.push(item.name)\n          }\n        })\n        this.multipleSelectTreeVal = valueArr\n        this.multipleSelectTreeKey = keyArr.join(',')\n      },\n      /* 单选/多选树方法-------------------结束 */\n    },\n  }\n</script>\n"]}]}